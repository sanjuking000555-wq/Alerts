name: Nifty Signal Monitor (Weekdays 11-20)

on:
  schedule:
    # Trigger ONCE per day at 9:00 AM IST (3:30 AM UTC)
    # Then your script runs continuously until 12:00 PM IST
    - cron: '30 3 * * 1-5'  # 9:00 AM IST = 3:30 AM UTC, Monday-Friday
  
  workflow_dispatch:  # Allow manual trigger for testing

env:
  TZ: 'Asia/Kolkata'

jobs:
  run-trading-bot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check if within weekdays 11-20 of month
      id: check_weekday
      run: |
        export TZ=Asia/Kolkata
        CURRENT_DAY=$(date +%d)
        CURRENT_MONTH=$(date +%m)
        CURRENT_YEAR=$(date +%Y)
        
        # Count weekdays from start of month to today
        WEEKDAY_COUNT=0
        for day in $(seq 1 $CURRENT_DAY); do
          DATE_STR="$CURRENT_YEAR-$CURRENT_MONTH-$(printf '%02d' $day)"
          DAY_OF_WEEK=$(date -d "$DATE_STR" +%u)
          if [ $DAY_OF_WEEK -le 5 ]; then
            WEEKDAY_COUNT=$((WEEKDAY_COUNT + 1))
          fi
        done
        
        echo "Current day: $CURRENT_DAY"
        echo "Weekday count: $WEEKDAY_COUNT"
        
        if [ $WEEKDAY_COUNT -ge 11 ] && [ $WEEKDAY_COUNT -le 20 ]; then
          echo "✅ Within weekdays 11-20 (Weekday #$WEEKDAY_COUNT)"
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Outside weekdays 11-20 range (Weekday #$WEEKDAY_COUNT)"
          echo "should_run=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Python 3.11
      if: steps.check_weekday.outputs.should_run == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      if: steps.check_weekday.outputs.should_run == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install smartapi-python pyotp pytz requests
    
    - name: Run Trading Bot (Continuous Loop - Like VSCode)
      if: steps.check_weekday.outputs.should_run == 'true'
      env:
        API_KEY: ${{ secrets.ANGEL_API_KEY }}
        CLIENT_CODE: ${{ secrets.ANGEL_CLIENT_CODE }}
        PASSWORD: ${{ secrets.ANGEL_PASSWORD }}
        TOTP_SECRET: ${{ secrets.ANGEL_TOTP_SECRET }}
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "🚀 Starting Nifty Signal Monitor in CONTINUOUS LOOP MODE"
        echo "This runs EXACTLY like VSCode - your while True loop!"
        echo "Will run from 9:00 AM to 12:00 PM IST (3 hours)"
        echo "Your script checks time every second, does work every 5 minutes"
        echo ""
        echo "Current IST Time: $(TZ=Asia/Kolkata date '+%Y-%m-%d %H:%M:%S %Z')"
        echo ""
        
        # Check if optimized_nifty_signal_monitor.py exists
        if [ -f "optimized_nifty_signal_monitor.py" ]; then
          SCRIPT_NAME="optimized_nifty_signal_monitor.py"
        else
          echo "⚠️ optimized_nifty_signal_monitor.py not found, listing files:"
          ls -la
          echo ""
          echo "❌ Please ensure your Python script is in the repository root"
          exit 1
        fi
        
        # Replace hardcoded credentials with environment variables
        sed -i "s/API_KEY = \".*\"/API_KEY = \"$API_KEY\"/" $SCRIPT_NAME
        sed -i "s/CLIENT_CODE = \".*\"/CLIENT_CODE = \"$CLIENT_CODE\"/" $SCRIPT_NAME
        sed -i "s/PASSWORD = \".*\"/PASSWORD = \"$PASSWORD\"/" $SCRIPT_NAME
        sed -i "s/TOTP_SECRET = \".*\"/TOTP_SECRET = \"$TOTP_SECRET\"/" $SCRIPT_NAME
        sed -i "s/TELEGRAM_TOKEN = \".*\"/TELEGRAM_TOKEN = \"$TELEGRAM_TOKEN\"/" $SCRIPT_NAME
        sed -i "s/TELEGRAM_CHAT_ID = \".*\"/TELEGRAM_CHAT_ID = \"$TELEGRAM_CHAT_ID\"/" $SCRIPT_NAME
        
        echo "Starting bot with 3-hour timeout..."
        echo "Your while True loop will run continuously!"
        echo ""
        
        # Run your script - it will loop continuously for 3 hours
        timeout 3h python $SCRIPT_NAME || {
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 124 ]; then
            echo ""
            echo "✅ Bot completed 3-hour continuous run successfully"
          else
            echo ""
            echo "⚠️ Bot stopped with exit code: $EXIT_CODE"
          fi
        }
    
    - name: Upload logs (if they exist)
      if: always() && steps.check_weekday.outputs.should_run == 'true'
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: trading-logs-${{ github.run_number }}
        path: |
          nifty_signals.log
          *.log
        retention-days: 30
        if-no-files-found: warn
    
    - name: Summary
      if: always() && steps.check_weekday.outputs.should_run == 'true'
      run: |
        echo "════════════════════════════════════════════════"
        echo "Continuous loop execution completed"
        echo "Finished at: $(TZ=Asia/Kolkata date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "════════════════════════════════════════════════"
